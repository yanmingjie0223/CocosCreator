// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
				width: 			    { value: 960.0, inspector : { displayName : "黑幕宽" } }
				height:			    { value: 640.0, inspector : { displayName : "黑幕高" } }
				radius:			    { value: 60.0, inspector : { displayName : "灯光半径" } }
				center: 				{ value: [480.0, 320.0], inspector : { displayName : "中心点" } }
				uvOffset: 			{ value: [0.0, 0.0, 1.0, 1.0], inspector : { displayName : "图集uv偏移" } }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
		uniform Constant {
			vec4 uvOffset;
			vec2 center;
			float width;
			float height;
			float radius;
		};

    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
		// uvOffset [l t r b]
		float uvx = (uv0.x - uvOffset.x) / (uvOffset.z - uvOffset.x);
		float uvy = (uv0.y - uvOffset.y) / (uvOffset.w - uvOffset.y);
		float cx = center.x / width;
		float cy = center.y / height;
		float x = abs(uvx - cx) * width;
		float y = abs(uvy - cy) * height;
		float dist = sqrt(x * x + y * y);
		float t = clamp((dist - 10.0) / radius, 0.0, 1.0);
		// 使用幂函数调整变化曲线，p > 1 变化更慢，p < 1 变化更快
		float p = 2.0; // 可以调整这个值，越大越慢，越小越快
		float alphaCurve = pow(t, p);
		o.a *= mix(0.0, 1.0, alphaCurve);

    return o;
  }
}%
