// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.30.2
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { MsgCode, msgCodeFromJSON, msgCodeToJSON, PlatformType, platformTypeFromJSON, platformTypeToJSON } from "./msg";

export const protobufPackage = "msg.user";

export interface UserData {
  nickname: string;
  openId: string;
  avatarUrl: string;
  province: string;
  city: string;
}

export interface C2S_Login {
  nickname: string;
  avatarUrl: string;
  code: string;
  platform: PlatformType;
}

export interface S2C_Login {
  code: MsgCode;
  message: string;
  openId: string;
  token: string;
  user: UserData | undefined;
}

function createBaseUserData(): UserData {
  return { nickname: "", openId: "", avatarUrl: "", province: "", city: "" };
}

export const UserData: MessageFns<UserData> = {
  encode(message: UserData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nickname !== "") {
      writer.uint32(10).string(message.nickname);
    }
    if (message.openId !== "") {
      writer.uint32(18).string(message.openId);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(106).string(message.avatarUrl);
    }
    if (message.province !== "") {
      writer.uint32(114).string(message.province);
    }
    if (message.city !== "") {
      writer.uint32(122).string(message.city);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.openId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.province = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.city = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserData {
    return {
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      openId: isSet(object.openId) ? globalThis.String(object.openId) : "",
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      province: isSet(object.province) ? globalThis.String(object.province) : "",
      city: isSet(object.city) ? globalThis.String(object.city) : "",
    };
  },

  toJSON(message: UserData): unknown {
    const obj: any = {};
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.openId !== "") {
      obj.openId = message.openId;
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.province !== "") {
      obj.province = message.province;
    }
    if (message.city !== "") {
      obj.city = message.city;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserData>, I>>(base?: I): UserData {
    return UserData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserData>, I>>(object: I): UserData {
    const message = createBaseUserData();
    message.nickname = object.nickname ?? "";
    message.openId = object.openId ?? "";
    message.avatarUrl = object.avatarUrl ?? "";
    message.province = object.province ?? "";
    message.city = object.city ?? "";
    return message;
  },
};

function createBaseC2S_Login(): C2S_Login {
  return { nickname: "", avatarUrl: "", code: "", platform: 0 };
}

export const C2S_Login: MessageFns<C2S_Login> = {
  encode(message: C2S_Login, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nickname !== "") {
      writer.uint32(10).string(message.nickname);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(18).string(message.avatarUrl);
    }
    if (message.code !== "") {
      writer.uint32(26).string(message.code);
    }
    if (message.platform !== 0) {
      writer.uint32(32).int32(message.platform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): C2S_Login {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseC2S_Login();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nickname = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.platform = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): C2S_Login {
    return {
      nickname: isSet(object.nickname) ? globalThis.String(object.nickname) : "",
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      platform: isSet(object.platform) ? platformTypeFromJSON(object.platform) : 0,
    };
  },

  toJSON(message: C2S_Login): unknown {
    const obj: any = {};
    if (message.nickname !== "") {
      obj.nickname = message.nickname;
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.platform !== 0) {
      obj.platform = platformTypeToJSON(message.platform);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<C2S_Login>, I>>(base?: I): C2S_Login {
    return C2S_Login.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<C2S_Login>, I>>(object: I): C2S_Login {
    const message = createBaseC2S_Login();
    message.nickname = object.nickname ?? "";
    message.avatarUrl = object.avatarUrl ?? "";
    message.code = object.code ?? "";
    message.platform = object.platform ?? 0;
    return message;
  },
};

function createBaseS2C_Login(): S2C_Login {
  return { code: 0, message: "", openId: "", token: "", user: undefined };
}

export const S2C_Login: MessageFns<S2C_Login> = {
  encode(message: S2C_Login, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.openId !== "") {
      writer.uint32(26).string(message.openId);
    }
    if (message.token !== "") {
      writer.uint32(34).string(message.token);
    }
    if (message.user !== undefined) {
      UserData.encode(message.user, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): S2C_Login {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseS2C_Login();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.openId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.user = UserData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): S2C_Login {
    return {
      code: isSet(object.code) ? msgCodeFromJSON(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      openId: isSet(object.openId) ? globalThis.String(object.openId) : "",
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      user: isSet(object.user) ? UserData.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: S2C_Login): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = msgCodeToJSON(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.openId !== "") {
      obj.openId = message.openId;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.user !== undefined) {
      obj.user = UserData.toJSON(message.user);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<S2C_Login>, I>>(base?: I): S2C_Login {
    return S2C_Login.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<S2C_Login>, I>>(object: I): S2C_Login {
    const message = createBaseS2C_Login();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.openId = object.openId ?? "";
    message.token = object.token ?? "";
    message.user = (object.user !== undefined && object.user !== null) ? UserData.fromPartial(object.user) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
